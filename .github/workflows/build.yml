name: Build Wheels

on:
  push:
    branches:
      - main
  release:
    types: [created]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, macos-latest, windows-2016]
    env:
      CIBW_BUILD: "cp37-* cp36-* cp38-* cp39-*"
      CIBW_SKIP: "pp* cp35"
      CIBW_BEFORE_BUILD_LINUX: "source packing/build_pango.sh && pip install cython && cd manimpango && cythonize cmanimpango.pyx -3 -k -f && cd ../ && pip install ."
      CIBW_BEFORE_BUILD_MACOS: "brew install pango && brew install cairo && pip install cython && cd manimpango && cythonize cmanimpango.pyx -3 -k -f && cd ../ && pip install ."
      CIBW_BEFORE_BUILD_WINDOWS: "pip install cython && python packing/download_dlls.py && cd manimpango && cythonize cmanimpango.pyx -3 -k -f && cd ../ && pkg-config --libs pango && pip install ."
      CIBW_ENVIRONMENT_WINDOWS: "PKG_CONFIG_PATH='C:\\cibw\\vendor\\lib\\pkgconfig'"
      CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: python packing/inject-dlls.py {wheel} {dest_dir} C:\cibw\vendor\bin
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
      CIBW_MANYLINUX_I686_IMAGE: manylinux2014
      CIBW_TEST_REQUIRES: pytest Cython
      CIBW_TEST_COMMAND: "pytest {project}/tests"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: "3.7"

      - name: Install cibuildwheel
        env:
          event_name: ${{ github.event_name }}
        continue-on-error: true
        shell: bash
        run: |
          python -m pip install cibuildwheel==1.6.4
          echo "$event_name"

      - name: Install External Dependencies (MacOS)
        if: runner.os == 'macOS'
        run: |
          brew install pango
          brew install cairo

      - name: Build wheels(Windows)
        if: runner.os == 'windows'
        run: |
          $env:PATH="$env:PATH;C:\cibw\vendor\pkg-config\bin"
          $env:PKG_CONFIG_PATH="C:\cibw\vendor\lib\pkgconfig"
          Copy-Item packing/LICENSE.bin .
          Rename-Item LICENSE.bin LICENSE.win32
          python -m cibuildwheel --output-dir wheelhouse
          7z a wheels.zip wheelhouse/*.whl

      - name: Build wheels (Non-Windows)
        if: runner.os != 'windows'
        run: |
          cp packing/LICENSE.bin .
          python -m cibuildwheel --output-dir wheelhouse
          7z a wheels.zip wheelhouse/*.whl

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheels.zip
          name: wheels-${{ runner.os }}
      - name: Publish (Release)
        if: ${{  github.event_name== 'release' && runner.os == 'Linux' }}
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install twine
          pip install cython
          python setup.py build_ext -i
          python setup.py sdist
          twine upload dist/*
      - name: Publish (Release)
        if: github.event_name == 'release'
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install twine
          twine upload wheelhouse/*.whl
          twine upload wheelhouse/*.whl
          twine upload wheelhouse/*.whl
  test_wheels_linux: # TODO: Check for i386 builds also
    needs: [build_wheels]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        container: ["python:3.6", "python:3.7", "python:3.8", "python:3.9"]
    name: Test Wheels Using Docker Images
    container: ${{matrix.container}}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels-Linux
          path: build
      - run: |
          python -m pip install --no-index --find-links build/wheelhouse manimpango
          python -c "import manimpango"

  success:
    needs: [build_wheels, test_wheels_linux]
    runs-on: ubuntu-latest
    name: Build Wheels Sucessfully
    steps:
      - name: Success
        run: echo Build Wheels Sucessfully
